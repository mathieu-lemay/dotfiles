# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Profiling [[[

# https://kev.inburke.com/kevin/profiling-zsh-startup-time/
if [[ "${ZSH_PROFILE_STARTUP:-false}" == true ]]; then
    # http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
    PS4=$'%D{%M%S%.} %N:%i> '
    exec 3>&2 2>/tmp/startlog.$$
    setopt xtrace prompt_subst
fi

# ]]]

# Global Env Vars [[[

# Set default terminal
export TERMINAL="kitty"

# Use proper date format
export LC_TIME="en_DK.UTF-8"

# XDG Base Directory spec
{{- range .envvars.xdg }}
export {{ .key }}="{{ .value }}"
{{- end }}

# Global Env Vars
{{- range .envvars.global }}
export {{ .key }}="{{ .value }}"
{{- end }}

{{ if eq .osid "linux-arch" -}}
# Use GCR SSH Agent
export SSH_AUTH_SOCK="${SSH_AUTH_SOCK:-"${XDG_RUNTIME_DIR}/gcr/ssh"}"

{{ end -}}

# Force apps to use XDG Spec
export AWS_CONFIG_FILE="${XDG_CONFIG_HOME}/aws/config"
export AWS_SHARED_CREDENTIALS_FILE="${XDG_CONFIG_HOME}/aws/credentials"
export DOCKER_CONFIG="${XDG_CONFIG_HOME}/docker"
export JFROG_CLI_HOME_DIR="${XDG_DATA_HOME}/jfrog"
export PYTHONSTARTUP="${XDG_CONFIG_HOME}/python/init.py"
export POETRY_HOME="${XDG_DATA_HOME}/poetry"
export PYENV_ROOT="${XDG_DATA_HOME}/pyenv"
export PIPX_HOME="${XDG_DATA_HOME}/pipx"
export PIPX_BIN_DIR="${PIPX_HOME}/bin"
export VAGRANT_HOME="${XDG_DATA_HOME}/vagrant"
export RUSTUP_HOME="${XDG_DATA_HOME}/rustup"
export ZINIT_HOME="${XDG_DATA_HOME}/zinit"
export K9SCONFIG="${XDG_CONFIG_HOME}/k9s"
export NVM_DIR="${XDG_DATA_HOME}/nvm"
export NPM_CONFIG_USERCONFIG="${XDG_CONFIG_HOME}/npm/npmrc"
export MYCLI_HISTFILE="${XDG_STATE_HOME}/mycli/history"
export INPUTRC="${XDG_CONFIG_HOME}/readline/inputrc"
export PSQLRC="${XDG_CONFIG_HOME}/psql/psqlrc"
export PSQL_HISTORY="${XDG_STATE_HOME}/psql/history"
export PGPASSFILE="${XDG_CONFIG_HOME}/psql/pgpass"

{{- if ne .path.jetbrains_jre "" }}
# Set JRE for JetBrains products
JETBRAINS_JRE="{{ .path.jetbrains_jre }}"
if [ -d "${JETBRAINS_JRE}" ]; then
    export IDEA_JDK="${JETBRAINS_JRE}"
    export PYCHARM_JDK="${JETBRAINS_JRE}"
    export CLION_JDK="${JETBRAINS_JRE}"
    export DATAGRIP_JDK="${JETBRAINS_JRE}"
    export STUDIO_JDK="${JETBRAINS_JRE}"
    export GOLAND_JDK="${JETBRAINS_JRE}"
    export RUSTROVER_JDK="${JETBRAINS_JRE}"
fi

{{- end }}

# Set an invalid default prefix to ensure wine is always called with a non default prefix
export WINEPREFIX=/dev/null
# Prevent Wine from taking over file associations
# https://wiki.archlinux.org/index.php/wine#Prevent_new_Wine_file_associations
export WINEDLLOVERRIDES="winemenubuilder.exe=d"

{{ if eq .chezmoi.os "darwin" -}}
# Set locale
export LC_ALL="en_CA.UTF-8"

# Force python3 for zsh-autoswitch-virtualenv
export AUTOSWITCH_DEFAULT_PYTHON=python3

{{ end -}}

# ]]]

# Modules Initializing [[[

fpath=(
    "${XDG_DATA_HOME}/zsh/compl"
    "${XDG_DATA_HOME}/zsh/prompts"
    {{- if eq .chezmoi.os "darwin" }}
    "{{ .homebrewPrefix }}/share/zsh/site-functions"
    {{- end }}
    $fpath
)

autoload -U compinit promptinit history-search-end bashcompinit
autoload -Uz vcs_info

{{- if eq .chezmoi.os "darwin" }}
compinit -i -d "${XDG_STATE_HOME}/zsh/zcompdump"
{{- else }}
compinit -d "${XDG_STATE_HOME}/zsh/zcompdump"
{{- end }}
promptinit
bashcompinit

{{- if eq .chezmoi.os "darwin" }}

# Ensure Homebrew prefix is in PATH before anything else
if [[ -d "{{ .homebrewPrefix }}/bin" ]] && [[ ":${PATH}:" != *":{{ .homebrewPrefix }}/bin:"* ]]; then
    export PATH="{{ .homebrewPrefix }}/bin:${PATH}"
fi

{{- end }}

[[ -e "${XDG_DATA_HOME}/zsh/tmux.zsh" ]] && . "${XDG_DATA_HOME}/zsh/tmux.zsh"

# ]]]

# Options [[[

setopt prompt_subst      # Enable parameter expansion for prompts
setopt correct           # Enable autocorrect
setopt auto_pushd        # Make cd push the old directory onto the directory stack
setopt pushd_ignore_dups # Ignore duplicates when pushing directory on the stack
setopt extendedglob      # Treat the `#', `~' and `^' characters as part of patterns for filename generation, etc.

zle_highlight=('paste:none')  # Disable highlight of pasted text

# ]]]

# Helper functions [[[

installed() {
    command -v "$1" &> /dev/null
    return $?
}

contains() {
    string="$1"
    substring="$2"
    if test "${string#*$substring}" != "$string"
    then
        return 0    # $substring is in $string
    else
        return 1    # $substring is not in $string
    fi
}

# ]]]

# Key Bindings [[[

# Use VI mode
bindkey -v

# Reduce ESC delay to 0.1s
export KEYTIMEOUT=1

# bind special keys according to readline configuration
[ -f /etc/inputrc ] && eval "$(sed -n 's/^/bindkey /; s/: / /p' /etc/inputrc)" > /dev/null

# https://unix.stackexchange.com/a/97844
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end

bindkey "^[[A" history-beginning-search-backward-end
bindkey "^[[B" history-beginning-search-forward-end
bindkey "^W" backward-kill-word
bindkey "^R" history-incremental-search-backward
{{- if or (eq .osid "linux-opensuse-tumbleweed") (eq .chezmoi.os "darwin") }}
bindkey "^[[1;5D" backward-word
bindkey "^[[1;5C" forward-word
bindkey "^[[1~" beginning-of-line
bindkey "^[[4~" end-of-line
bindkey '^[[3~' delete-char
{{- else }}
bindkey "^[OA" history-beginning-search-backward-end
bindkey "^[OB" history-beginning-search-forward-end
{{- end }}

# Make backspace and ^h work after returning from normal mode
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char

# ]]]

# ZStyle options [[[

# Add completion for cd ..
zstyle ':completion:*' special-dirs true
# Case insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'

# Version Control System
zstyle ':vcs_info:*' enable git svn
zstyle ':vcs_info:*' check-for-changes true

# ]]]

# Source extra files [[[

ZSH_EXTRA_FILES=(
    "${ZDOTDIR}/aliases"
    "${ZDOTDIR}/functions"
    "${ZDOTDIR}/local"
    "/usr/share/doc/pkgfile/command-not-found.zsh"
)

for f in ${ZSH_EXTRA_FILES[@]}; do
    [[ -f "$f" ]] && . "$f"
done

# ]]]

# Plugins [[[

for f in "${HOME}/.local/share/zsh/plugins"/*; do
    . "$f"
done

# ]]]

# Misc configs and env vars [[[

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

{{- $dircolors_cmd := "dircolors" }}
{{- if eq .chezmoi.os "darwin" }}
{{- $dircolors_cmd := "gdircolors" }}
{{- end }}

if installed {{ $dircolors_cmd }}; then
    [ -r ~/.dircolors ] && eval "$({{ $dircolors_cmd }} -b ~/.dircolors)" || eval "$({{ $dircolors_cmd }} -b)"
fi

# Enable core dumps
ulimit -c unlimited

# Setup default apps
if installed nvim; then
    export EDITOR="nvim"
    export VISUAL="nvim"
else
    export EDITOR="vim"
    export VISUAL="vim"
fi

if installed bat; then
    export MANPAGER="sh -c 'col -bx | bat --no-config -l man -p --theme Dracula'"
    export MANROFFOPT="-c"
fi

# Remove / from WORDCHARS, ie. make / a word delimiter
export WORDCHARS="${WORDCHARS/\//}"

# Don't prepend virtual env name to PS1
export VIRTUAL_ENV_DISABLE_PROMPT=1

if [[ "${XDG_SESSION_TYPE}" = "tty" ]]; then
    # Fix GPG pinentry
    GPG_TTY=$(tty); export GPG_TTY
fi

# Python
[[ -f "$HOME/.pythonrc" ]] && export PYTHONSTARTUP="$HOME/.pythonrc"

# ]]]

# Local and Ecosystem specific PATH [[[

# Local prefix
if [[ -d "${HOME}/.local/bin" ]] && [[ ":${PATH}:" != *":${HOME}/.local/bin:"* ]]; then
    export PATH="${HOME}/.local/bin:${PATH}"
fi
if [[ -d "${HOME}/.local/lib" ]] && [[ ":${LD_LIBRARY_PATH}:" != *":${HOME}/.local/lib:"* ]]; then
    export LD_LIBRARY_PATH="${HOME}/.local/lib:${LD_LIBRARY_PATH}"
fi
if [[ -d "${HOME}/.local/lib/pkgconfig" ]] && [[ ":${PKG_CONFIG_PATH}:" != *":${HOME}/.local/lib/pkgconfig:"* ]]; then
    export PKG_CONFIG_PATH="${HOME}/usr/lib/pkgconfig:${PKG_CONFIG_PATH}"
fi

# Extra PATH
paths=(
    "${CARGO_HOME}/bin"
    "${GOPATH}/bin"
    "${POETRY_HOME}/bin"
    "${PIPX_BIN_DIR}"
    "${XDG_DATA_HOME}/npm/bin"
)
for p in "${paths[@]}"; do
    if [[ -d "${p}" ]] && [[ ":${PATH}:" != *":${p}:"* ]]; then
        export PATH="${p}:${PATH}"
    fi
done
unset paths

# ]]]

# Cleanup [[[

unset -f installed

if [[ "${ZSH_PROFILE_STARTUP:-false}" == true ]]; then
    unsetopt xtrace
    exec 2>&3 3>&-
fi

# ]]]

# vi: ft=zsh foldmethod=marker foldmarker=[[[,]]]
