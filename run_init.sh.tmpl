#! /bin/bash

set -euo pipefail

. ~/.local/lib/log.sh

ask_yes_no() {
    local resp default

    prompt="${1}"
    default="${2:-n}"

    printf "\\e[36m[PROMPT]\\e[0m  %s" "${prompt} " >&2

    read -r -n1 -s resp;
    echo "${resp:-${default}}"

    resp=$(echo "${resp:-${default}}" | tr '[:upper:]' '[:lower:]' | xargs)

    if [[ "${resp}" = "y" ]]; then
        return 0
    else
        return 1
    fi
}

install_nvim_plugins() {
    if ! command -v nvim &> /dev/null; then
        warning "$0: nvim not installed: skipping"
        return
    fi

    if [ ! -e "${HOME}/.config/nvim/autoload/plug.vim" ]; then
        info "Installing vim-plug"
        curl --create-dirs -fLo "${HOME}/.config/nvim/autoload/plug.vim" \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    fi

    if ask_yes_no "Install vim plugins [y/N]?" "n"; then
        # TERM workaround to avoid loading non existing color scheme
        TERM=xterm nvim -S "{{ .chezmoi.sourceDir }}/vimplug.lock" +qall
    fi
}

install_pyenv_latest() {
    if ! command -v pyenv &> /dev/null; then
        warning "$0: pyenv not installed: skipping"
        return
    fi

    pyenv_plugin_root="$(pyenv root)/plugins"

    if [ -e "${pyenv_plugin_root}/xxenv-latest" ]; then
        info "Updating pyenv-latest plugin"
        pushd "${pyenv_plugin_root}/xxenv-latest" > /dev/null
        git pull
        popd > /dev/null
    else
        info "Installing pyenv-latest plugin"
        [[ -d "$pyenv_plugin_root" ]] || mkdir -p "$pyenv_plugin_root"
        git clone https://github.com/momo-lab/xxenv-latest.git "${pyenv_plugin_root}/xxenv-latest"
    fi
}

install_tmux_plugin_manager() {
    if ! command -v tmux &> /dev/null; then
        warning "$0: tmux not installed: skipping"
        return
    fi

    if [ ! -e "$HOME/.local/share/tmux/tpm" ]; then
        info "Installing tmux plugin manager"
        mkdir -p "$HOME/.local/share/tmux"
        git clone https://github.com/tmux-plugins/tpm ~/.local/share/tmux/tpm
    else
        info "Updating tmux plugin manager"
        pushd "$HOME/.local/share/tmux/tpm" > /dev/null
        git pull
        popd > /dev/null
    fi
}

install_cmus_notify() {
    if ! command -v cargo &> /dev/null; then
        warning "$0: cargo not installed: skipping"
        return
    fi

    if ask_yes_no "Install cmus-notify [y/N]?" "n"; then
        cargo install --root ~/.local --git https://github.com/mathieu-lemay/cmus-notify --force
    fi
}

install_crontab() {
    if ! command -v crontab &> /dev/null; then
        warning "$0: crontab not installed: skipping"
        return
    fi

    crontab "{{ .chezmoi.sourceDir }}/crontab"
}

build_bat_cache() {
    if ! command -v bat &> /dev/null; then
        warning "$0: bat not installed: skipping"
        return
    fi

    info "Building bat cache"
    bat cache --build > /dev/null
}

compile_terminfo_entries() {
    if ! command -v tic &> /dev/null; then
        warning "$0: tic not installed: skipping"
        return
    fi

    for file in "{{ .chezmoi.sourceDir }}"/terminfo/*; do
        tic "${file}"
    done
}

rebuild_font_cache() {
    if ! command -v fc-cache &> /dev/null; then
        warning "$0: fc-cache not installed: skipping"
        return
    fi

    if ask_yes_no "Update font cache [y/N]?" "n"; then
        fc-cache -f
    fi
}

_update_setting() {
    path="${1}"
    key="${2}"
    value="${3}"

    if ! gsettings writable "${path}" "${key}" &>/dev/null; then
        warning "Can't write to ${path} ${key}"
        return
    fi

    gsettings set "${path}" "${key}" "${value}"
}

apply_gnome_tweaks() {
    if ! command -v gsettings &> /dev/null; then
        warning "$0: gsettings not installed: skipping"
        return
    fi

    _update_setting org.gnome.desktop.interface clock-show-seconds true
    _update_setting org.gnome.desktop.sound event-sounds false
    _update_setting org.gnome.desktop.wm.preferences button-layout 'close,minimize,maximize:appmenu'

    _update_setting org.gnome.meld highlight-current-line true
    _update_setting org.gnome.meld highlight-syntax true
    _update_setting org.gnome.meld indent-width 4
    _update_setting org.gnome.meld insert-spaces-instead-of-tabs true
    _update_setting org.gnome.meld show-line-numbers true
    _update_setting org.gnome.meld style-scheme 'meld-dark'

    _update_setting org.gnome.nautilus.list-view default-zoom-level 'small'
    _update_setting org.gnome.nautilus.list-view use-tree-view true
    _update_setting org.gnome.nautilus.preferences default-folder-viewer 'list-view'

    _update_setting org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ binding '<Control><Alt>t'
    _update_setting org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ command 'kitty'
    _update_setting org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ name 'Terminal'
    _update_setting org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ binding '<Shift><Control><Alt>t'
    _update_setting org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ command 'env ZSH_TMUX_AUTOSTART=false kitty'
    _update_setting org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ name 'Terminal (Disable tmux)'

    _update_setting org.gnome.tweaks show-extensions-notice false

    # TODO: Add org.gnome.shell.extensions.dash-to-dock
}

install_nvim_plugins
install_pyenv_latest
install_tmux_plugin_manager
install_cmus_notify
install_crontab
build_bat_cache
compile_terminfo_entries
{{- if eq .chezmoi.os "linux" }}
rebuild_font_cache
apply_gnome_tweaks
{{- end }}

# vi: ft=sh
