#! /bin/bash

set -euo pipefail

. ~/.local/lib/log.sh

ask_yes_no() {
    local resp default

    prompt="${1}"
    default="${2:-n}"

    printf "\\e[36m[PROMPT]\\e[0m  %s" "${prompt} " >&2

    read -r -n1 -s resp;
    echo "${resp:-${default}}"

    resp=$(echo "${resp:-${default}}" | tr '[:upper:]' '[:lower:]' | xargs)

    if [[ "${resp}" = "y" ]]; then
        return 0
    else
        return 1
    fi
}

install_nvim_plugins() {
    if ! command -v nvim &> /dev/null; then
        warning "$0: nvim not installed: skipping"
        return
    fi

    if [ ! -e "${HOME}/.config/nvim/autoload/plug.vim" ]; then
        info "Installing vim-plug"
        curl --create-dirs -fLo "${HOME}/.config/nvim/autoload/plug.vim" \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    fi

    if ask_yes_no "Install vim plugins [y/N]?" "n"; then
        # TERM workaround to avoid loading non existing color scheme
        TERM=xterm nvim -S "{{ .chezmoi.sourceDir }}/vimplug.lock" +qall
    fi
}

install_tmux_plugin_manager() {
    if ! command -v tmux &> /dev/null; then
        warning "$0: tmux not installed: skipping"
        return
    fi

    if [ ! -e "$HOME/.local/share/tmux/tpm" ]; then
        info "Installing tmux plugin manager"
        mkdir -p "$HOME/.local/share/tmux"
        git clone https://github.com/tmux-plugins/tpm ~/.local/share/tmux/tpm
    else
        info "Updating tmux plugin manager"
        pushd "$HOME/.local/share/tmux/tpm" > /dev/null
        git pull
        popd > /dev/null
    fi
}

install_fzf_git() {
    if ! command -v fzf &> /dev/null; then
        warning "$0: fzf not installed: skipping"
        return
    fi

    info "Installing fzf-git"
    mkdir -p "${HOME}/.local/share/fzf"
    curl -sSL "https://raw.githubusercontent.com/junegunn/fzf-git.sh/main/fzf-git.sh" -o "${HOME}/.local/share/fzf/fzf-git.sh"
}

install_cmus_notify() {
    if ! command -v cargo &> /dev/null; then
        warning "$0: cargo not installed: skipping"
        return
    fi

    if ask_yes_no "Install cmus-notify [y/N]?" "n"; then
        cargo install --root ~/.local --git https://github.com/mathieu-lemay/cmus-notify --force
    fi
}

install_crontab() {
    if ! command -v crontab &> /dev/null; then
        warning "$0: crontab not installed: skipping"
        return
    fi

    crontab "{{ .chezmoi.sourceDir }}/crontab"
}

build_bat_cache() {
    if ! command -v bat &> /dev/null; then
        warning "$0: bat not installed: skipping"
        return
    fi

    info "Building bat cache"
    bat cache --build > /dev/null
}

compile_terminfo_entries() {
    if ! command -v tic &> /dev/null; then
        warning "$0: tic not installed: skipping"
        return
    fi

    for file in "{{ .chezmoi.sourceDir }}"/terminfo/*; do
        tic "${file}"
    done
}

rebuild_font_cache() {
    if ! command -v fc-cache &> /dev/null; then
        warning "$0: fc-cache not installed: skipping"
        return
    fi

    if ask_yes_no "Update font cache [y/N]?" "n"; then
        fc-cache -f
    fi
}

apply_dconf_config() {
    if ! command -v dconf &> /dev/null; then
        warning "$0: dconf not installed: skipping"
        return
    fi

    dconf load / < "{{ .chezmoi.sourceDir }}/dconf.dump"

    # TODO: Add org.gnome.shell.extensions.dash-to-dock
}

sync_library_fonts() {
    info "Syncing ~/.local/share/fonts to ~/Library/Fonts"
    rsync -a --delete ~/.local/share/fonts/ Library/Fonts
}

install_nvim_plugins
install_tmux_plugin_manager
install_fzf_git
install_cmus_notify
install_crontab
build_bat_cache
compile_terminfo_entries
{{- if eq .chezmoi.os "linux" }}
rebuild_font_cache
apply_dconf_config
{{- else if eq .chezmoi.os "darwin" }}
sync_library_fonts
{{- end }}

{{- if eq .signingkey "" }}
warning "No GPG signing key set: git commit signature disabled"
{{- end }}

# vi: ft=sh
